"""OpenSCAD interface"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/api/01_scad.ipynb.

# %% auto 0
__all__ = ['colorscheme', 'colorschemes', 'export_to', 'view', 'view_top', 'view_bottom', 'view_right', 'view_left', 'view_front',
           'view_back', 'view_all', 'export_to_stl']

# %% ../../nbs/api/01_scad.ipynb 2
#import solid2
from solid2.core.object_base.object_base_impl import RenderMixin
from solid2 import *
import subprocess

from PIL import Image
import io
from fastcore.all import *

import matplotlib.pyplot as plt
import numpy
from stl import mesh
from mpl_toolkits import mplot3d
from matplotlib import pyplot

# %% ../../nbs/api/01_scad.ipynb 4
colorscheme = "Tomorrow Night" #"Cornfield"
colorschemes = [
    "Cornfield", "Metallic", "Sunset", "Starnight",
    "BeforeDawn", "Nature", "DeepOcean", "Solarized",
    "Tomorrow", "Tomorrow Night", "Monotone"
]

# %% ../../nbs/api/01_scad.ipynb 8
def export_to(model, export_format, w=600, h=300, colorscheme=None,
              translate=None, rot=None, dist=None,
              eye=None, center=None, viewall=True):

    if (translate or rot or dist) and (eye or center):
        raise Exception("Only triple transalte,rot,dist or tuple eye,center can be specified at a time")

    camera = []

    if translate or rot or dist:
        translate = translate or (10,-10,10)
        rot = rot or (0,0,0)
        dist = dist or 10

    if eye or center:
        eye = eye or (10,-10,10)
        center = center or (0,0,0)

    if translate:
        camera = ','.join(map(str,translate + rot + (dist,)))
    if eye:
        camera = ','.join(map(str,eye + center))

    if camera:
        camera = ['--camera', camera]
    
    colorscheme = colorscheme or globals()['colorscheme']
    
    result = subprocess.run(
        ['openscad', '--colorscheme', colorscheme, '--imgsize', f'{w},{h}',
         '--export-format', export_format,
         #'--preview', 'throwntogether',
         '--view', 'axes,crosshairs,scales',
         #'--view', 'scales',
         '--projection', 'ortho',
         *camera,
         *(['--viewall'] if viewall else []),
         '-o', '-', '-'],
        input=bytes(str(model), 'utf-8'),
        capture_output=True,
        check=True
    )
    return result.stdout

# %% ../../nbs/api/01_scad.ipynb 9
@delegates(export_to)
def view(model, w=600, h=300, colorscheme=None, **kwargs):
    "Convert model to image"
    # If we render at slightly higher resolution, the result looks smoother
    s = 1.75

    data = export_to(model, "png", w=int(s*w), h=int(s*h), colorscheme=colorscheme, **kwargs)

    return Image.open(io.BytesIO(data)).resize((w,h), resample=Image.LANCZOS)

# %% ../../nbs/api/01_scad.ipynb 11
@patch
def _repr_png_(self: RenderMixin):
    return view(self)._repr_png_()

del RenderMixin._ipython_display_
RenderMixin.__str__ = RenderMixin.__repr__
del RenderMixin.__repr__

# %% ../../nbs/api/01_scad.ipynb 15
@delegates(view)
def view_top(d, **kwargs): return view(d, eye=(0,0,1), **kwargs)
@delegates(view)
def view_bottom(d, **kwargs): return view(d, translate=(0,0,-1), rot=(180,0,0),dist=1, **kwargs)
# the one below flips x for some reason
#def view_bottom(d, **kwargs): return view(d, eye=(0,0,-1), **kwargs)
@delegates(view)
def view_right(d, **kwargs): return view(d, eye=(1,0,0), **kwargs)
@delegates(view)
def view_left(d, **kwargs): return view(d, eye=(-1,0,0), **kwargs)
@delegates(view)
def view_front(d, **kwargs): return view(d, eye=(0,-1,0), **kwargs)
@delegates(view)
def view_back(d, **kwargs): return view(d, eye=(0,1,0), **kwargs)

# %% ../../nbs/api/01_scad.ipynb 19
def view_all(d):
    fig, axs = plt.subplots(2,3, figsize=(12,8)) # 2,5
    axs = axs.flatten()

    dirs = [view_top, view_bottom, view_right, view_left, view_front, view_back]
    
    for ax, fun in zip(axs, dirs):
        title = fun.__name__.split("_")[1].capitalize()
        ax.imshow(fun(d, w=300, h=300))
        ax.axis("off")
        ax.set_title(title)

# %% ../../nbs/api/01_scad.ipynb 25
def export_to_stl(model):
    stl = export_to(model, 'stl')
    stl = mesh.Mesh.from_file("", fh=io.BytesIO(stl))
    return stl
